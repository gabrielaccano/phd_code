peak2_day <- julian_seq[peaks[1, 2]]
# Ensure order: earlier first
if (peak1_day > peak2_day) {
temp <- peak1_day
peak1_day <- peak2_day
peak2_day <- temp
}
dip_length <- peak2_day - peak1_day
tibble(
peak1_day = peak1_day,
peak2_day = peak2_day,
dip_length = dip_length
)
} else {
tibble(
peak1_day = NA,
peak2_day = NA,
dip_length = NA
)
}
}) %>%
ungroup()
dip_length_df <- diapause_detected %>%
group_by(year) %>%
summarise({
# Subset current year's data
data_year <- cur_data()
# Try fitting the GAM
gam_fit <- tryCatch(
gam(count ~ s(julian, bs = "cs"), data = data_year),
error = function(e) return(NULL)
)
# If GAM failed
if (is.null(gam_fit)) {
return(tibble(peak1_day = NA, peak2_day = NA, dip_length = NA))
}
# Predict values
preds <- tryCatch(
predict(gam_fit, newdata = data.frame(julian = julian_seq)),
error = function(e) return(rep(NA, length(julian_seq)))
)
# Check for validity
if (all(is.na(preds)) || !is.numeric(preds)) {
return(tibble(peak1_day = NA, peak2_day = NA, dip_length = NA))
}
# Try finding peaks
peaks <- tryCatch(
findpeaks(preds, sortstr = TRUE, minpeakdistance = 10),
error = function(e) NULL
)
if (is.null(peaks) || nrow(peaks) < 2) {
return(tibble(peak1_day = NA, peak2_day = NA, dip_length = NA))
}
# Use first and last peak to define dip
peak1_day <- julian_seq[peaks[nrow(peaks), 2]]
peak2_day <- julian_seq[peaks[1, 2]]
if (peak1_day > peak2_day) {
temp <- peak1_day
peak1_day <- peak2_day
peak2_day <- temp
}
dip_length <- peak2_day - peak1_day
tibble(peak1_day = peak1_day, peak2_day = peak2_day, dip_length = dip_length)
}) %>%
ungroup()
dip_length_df <- diapause_detected %>%
group_by(year) %>%
summarise({
# Subset current year's data
data_year <- cur_data()
# Try fitting the GAM
gam_fit <- tryCatch(
gam(count ~ s(julian, bs = "cs"), data = data_year),
error = function(e) (NULL)
)
# If GAM failed
if (is.null(gam_fit)) {
else(tibble(peak1_day = NA, peak2_day = NA, dip_length = NA))
dip_length_df <- diapause_detected %>%
group_by(year) %>%
summarise({
data_year <- cur_data()
# Try fitting GAM
gam_fit <- tryCatch(
gam(count ~ s(julian, bs = "cs"), data = data_year),
error = function(e) NULL
)
if (is.null(gam_fit)) {
tibble(peak1_day = NA, peak2_day = NA, dip_length = NA)
} else {
preds <- tryCatch(
predict(gam_fit, newdata = data.frame(julian = julian_seq)),
error = function(e) rep(NA, length(julian_seq))
)
if (all(is.na(preds)) || !is.numeric(preds)) {
tibble(peak1_day = NA, peak2_day = NA, dip_length = NA)
} else {
peaks <- tryCatch(
findpeaks(preds, sortstr = TRUE, minpeakdistance = 10),
error = function(e) NULL
)
if (is.null(peaks) || nrow(peaks) < 2) {
tibble(peak1_day = NA, peak2_day = NA, dip_length = NA)
} else {
peak1_day <- julian_seq[peaks[nrow(peaks), 2]]
peak2_day <- julian_seq[peaks[1, 2]]
if (peak1_day > peak2_day) {
temp <- peak1_day
peak1_day <- peak2_day
peak2_day <- temp
}
dip_length <- peak2_day - peak1_day
tibble(
peak1_day = peak1_day,
peak2_day = peak2_day,
dip_length = dip_length
)
}
}
}
}) %>%
ungroup()
View(dip_length_df)
year_98<- diapause_detected |>
filter(year=1998)
year_98<- diapause_detected |>
filter(year==1998)
gam_fit_98<- gam(count~s(julian, bs= "cs"), data= year_98)
preds_98<- predict(gam_fit_98, newdata = data.frame(julian= julian_seq))
peaks<- findpeaks(preds, sortstr= TRUE, minpeakdistance= 10)
peaks<- findpeaks(preds_98, sortstr= TRUE, minpeakdistance= 10)
diapause_time<- diapause_detected |>
group_by(year) |>
arrange(julian) |>
summarise({
peak_day<- julian[which.max(count)]
peak_val<- max(count, na.rm=TRUE)
threshold<- .5*peak_val
after_peak<- filter(cur_data(), julian>peak_day)
drop_day<- after_peak |>
filter(count<threshold) |>
slice_head(n=1) |>
pull(julian)
if (length(drop_day) == 0) {
else(tibble(drop_day = NA, rise_day = NA, dip_length = NA))
diapause_time<- diapause_detected |>
group_by(year) |>
arrange(julian) |>
summarise({
peak_day<- julian[which.max(count)]
peak_val<- max(count, na.rm=TRUE)
threshold<- .5*peak_val
after_peak<- filter(cur_data(), julian>peak_day)
drop_day<- after_peak |>
filter(count<threshold) |>
slice_head(n=1) |>
pull(julian)
if (length(drop_day) == 0) {
return(tibble(drop_day = NA, rise_day = NA, dip_length = NA))
}
after_drop <- filter(after_peak, julian > drop_day)
rise_day <- after_drop %>%
filter(count >= threshold) %>%
slice_head(n = 1) %>%
pull(julian)
if (length(rise_day) == 0) {
return(tibble(drop_day = drop_day, rise_day = NA, dip_length = NA))
}
dip_length <- rise_day - drop_day
tibble(drop_day = drop_day, rise_day = rise_day, dip_length = dip_length)
}) %>%
ungroup()
diapause_time <- diapause_detected |>
group_by(year) |>
arrange(julian) |>
summarise({
peak_day <- julian[which.max(count)]
peak_val <- max(count, na.rm = TRUE)
threshold <- 0.5 * peak_val
after_peak <- filter(cur_data(), julian > peak_day)
drop_day <- after_peak |>
filter(count < threshold) |>
slice_head(n = 1) |>
pull(julian)
if (length(drop_day) == 0) {
tibble(drop_day = NA, rise_day = NA, dip_length = NA)
} else {
after_drop <- filter(after_peak, julian > drop_day)
rise_day <- after_drop |>
filter(count >= threshold) |>
slice_head(n = 1) |>
pull(julian)
if (length(rise_day) == 0) {
tibble(drop_day = drop_day, rise_day = NA, dip_length = NA)
} else {
dip_length <- rise_day - drop_day
tibble(drop_day = drop_day, rise_day = rise_day, dip_length = dip_length)
}
}
}) |>
ungroup()
View(diapause_time)
str(regal_return_matrix$year)
numeric_year_regal <- as.numeric(as.character(regal_return_matrix$year))
regal_return_matrix$year <- as.numeric(as.character(regal_return_matrix$year))
regal_year_num_perm_results <- list(
year            = adonis2(regal_perm_dist ~ year,
data = regal_return_matrix,
permutations = 10000),
month           = adonis2(regal_perm_dist ~ month,
data = regal_return_matrix,
permutations = 10000),
year_month      = adonis2(regal_perm_dist ~ year + month + year:month,
data = regal_return_matrix,
permutations = 10000),
field           = adonis2(regal_perm_dist ~ field,
data = regal_return_matrix,
permutations = 10000),
month_field     = adonis2(regal_perm_dist ~ month * field,
data = regal_return_matrix,
permutations = 10000),
year_field      = adonis2(regal_perm_dist ~ year + field + year:field,
data = regal_return_matrix,
permutations = 10000)
)
yr_num_summary_table <- do.call(rbind, lapply(names(regal_perm_results), function(name) {
result <- regal_perm_results[[name]]
data.frame(
model = name,
R2 = result$R2[1],
F = result$F[1],
p = result$`Pr(>F)`[1],
row.names = NULL
)
}))
# View the summary table
print(yr_num_summary_table)
full_regal_perm_results <- list(
full_model = adonis2(
regal_perm_dist ~ year + month + field + year:month + year:field,
data = regal_return_matrix,
permutations = 10000,
by = "margin"
)
)
yr_num_summary_table <- do.call(rbind, lapply(names(regal_year_num_perm_results), function(name) {
result <- regal_year_num_perm_results[[name]]
data.frame(
model = name,
R2 = result$R2[1],
F = result$F[1],
p = result$`Pr(>F)`[1],
row.names = NULL
)
}))
# View the summary table
print(yr_num_summary_table)
yr_num_summary_table <- do.call(rbind, lapply(names(full_regal_perm_results), function(name) {
result <- full_regal_perm_results[[name]]
data.frame(
model = name,
R2 = result$R2[1],
F = result$F[1],
p = result$`Pr(>F)`[1],
row.names = NULL
)
}))
# View the summary table
print(yr_num_summary_table)
View(matrix_98_24)
regal_week<- regal_prep |>
mutate(week_2= floor((week-1)/2)+1) |>
group_by(year, week_2, nectar_species_cleaned, field) |>
summarize(count= n(), .groups= "drop")
view(regal_week)
regal_week<- regal_prep |>
mutate(week_2= floor((week-1)/2)+1) |>
group_by(year, week_2, nectar_species_cleaned, field) |>
summarize(count= n(), .groups= "drop") |>
pivot_wider(names_from = nectar_species_cleaned,
values_from = n,
values_fill = list(n = 0))
regal_week<- regal_prep |>
mutate(week_2= floor((week-1)/2)+1) |>
group_by(year, week_2, nectar_species_cleaned, field) |>
summarize(count= n(), .groups= "drop") |>
pivot_wider(names_from = nectar_species_cleaned,
values_from = count,
values_fill = list(n = 0))
view(regal_week)
regal_week<- regal_prep |>
mutate(week_2= floor((week-1)/2)+1) |>
group_by(year, week_2, nectar_species_cleaned, field) |>
summarize(count= n(), .groups= "drop") |>
pivot_wider(names_from = nectar_species_cleaned,
values_from = count,
values_fill = list(count = 0))
rownames(regal_week) <- paste(regal_week$year,
regal_week$week_2,
regal_week$field,
sep = "_")
#remove metadata
regal_week_numeric_only <- as.data.frame(regal_week[, !(names(regal_week) %in% c("year", "week_2", "field"))])
rownames(regal_week_numeric_only) <- rownames(regal_week)
#remove outlier columns and rows
regal_week_nectar_counts <- colSums(regal_week_numeric_only != 0)
regal_week_keep_cols<- regal_week_nectar_counts>=10
regal_week_filtered_outliers<- regal_week_numeric_only[, regal_week_keep_cols]
regal_week_row_sums <- rowSums(regal_week_filtered_outliers, na.rm = TRUE)
regal_week_keep_rows<-regal_week_row_sums>=5
regal_week_numeric_filtered<- regal_week_filtered_outliers[regal_week_keep_rows, ]
view(regal_week_numeric_filtered)
regal_week_perm_dist<- vegdist(regal_week_numeric_filtered, method= "bray",
)
regal_week_perm_results <- list(
year= adonis2(regal_week_perm_dist ~ year,
data = regal_week,
permutations = 10000),
week= adonis2(regal_week_perm_dist ~ week_2,
data = regal_week,
permutations = 10000),
year_week= adonis2(regal_week_perm_dist~year*week_2,
data= regal_week,
permutations = 10000),
field= adonis2(regal_week_perm_dist~field,
data= regal_week,
permutations = 10000),
week_field= adonis2(regal_week_perm_dist~ week_2*field,
data= regal_week,
permutations = 1000),
year_field= adonis2(regal_perm_dist~ field*year,
data= regal_return_matrix,
permutations = 10000))
#get metadata attached
regal_week_numeric_filtered$combo_id <- rownames(regal_week_numeric_filtered)
# Then separate that column back into original parts
week_parts <- do.call(rbind, strsplit(regal_week_numeric_filtered$combo_id, "_"))
colnames(week_parts) <- c("year", "week", "field")
regal_week_return_matrix<- cbind(week_parts, regal_week_numeric_filtered) |>
as.data.frame() |>
mutate(year= as.factor(year),
week= as.factor(week_2),
field= as.factor(field)) |>
select("year", "week", "field")
regal_week_return_matrix<- cbind(week_parts, regal_week_numeric_filtered) |>
as.data.frame() |>
mutate(year= as.factor(year),
week= as.factor(week),
field= as.factor(field)) |>
select("year", "week", "field")
view(regal_week_return_matrix)
regal_week_perm_results <- list(
year= adonis2(regal_week_perm_dist ~ year,
data = regal_week_return_matrix,
permutations = 10000),
week= adonis2(regal_week_perm_dist ~ week_2,
data = regal_week_return_matrix,
permutations = 10000),
year_week= adonis2(regal_week_perm_dist~year*week_2,
data= regal_week_return_matrix,
permutations = 10000),
field= adonis2(regal_week_perm_dist~field,
data= regal_week_return_matrix,
permutations = 10000),
week_field= adonis2(regal_week_perm_dist~ week_2*field,
data= regal_week_return_matrix,
permutations = 1000),
year_field= adonis2(regal_perm_dist~ field*year,
data= regal_week_return_matrix,
permutations = 10000))
regal_week_perm_results <- list(
year= adonis2(regal_week_perm_dist ~ year,
data = regal_week_return_matrix,
permutations = 10000),
week= adonis2(regal_week_perm_dist ~ week,
data = regal_week_return_matrix,
permutations = 10000),
year_week= adonis2(regal_week_perm_dist~year*week,
data= regal_week_return_matrix,
permutations = 10000),
field= adonis2(regal_week_perm_dist~field,
data= regal_week_return_matrix,
permutations = 10000),
week_field= adonis2(regal_week_perm_dist~ week*field,
data= regal_week_return_matrix,
permutations = 1000),
year_field= adonis2(regal_perm_dist~ field*year,
data= regal_week_return_matrix,
permutations = 10000))
regal_week_perm_results <- list(
year= adonis2(regal_week_perm_dist ~ year,
data = regal_week_return_matrix,
permutations = 10000),
week= adonis2(regal_week_perm_dist ~ week,
data = regal_week_return_matrix,
permutations = 10000),
year_week= adonis2(regal_week_perm_dist~year*week,
data= regal_week_return_matrix,
permutations = 10000),
field= adonis2(regal_week_perm_dist~field,
data= regal_week_return_matrix,
permutations = 10000),
week_field= adonis2(regal_week_perm_dist~ week*field,
data= regal_week_return_matrix,
permutations = 1000),
year_field= adonis2(regal_week_perm_dist~ field*year,
data= regal_week_return_matrix,
permutations = 10000))
week_summary_table <- do.call(rbind, lapply(names(regal_week_perm_results), function(name) {
result <- regal_week_perm_results[[name]]
data.frame(
model = name,
R2 = result$R2[1],
F = result$F[1],
p = result$`Pr(>F)`[1],
row.names = NULL
)
}))
# View the summary table
print(week_summary_table)
#plotting density values--eliminates small values (regal nectar use over years)
ggplot(regal_remove_na, aes(x=julian, y=factor(year), fill=nectar_species_cleaned))+
geom_density_ridges(scale= 1, alpha=.5, jittered_points = TRUE, rel_min_height= .1)+
facet_wrap(~factor(sex, levels = c("M", "F")))+
scale_y_discrete(limits=rev)
#Only regals
regal_df<- matrix_98_24 |>
filter(butterfly_species_cleaned == "ARID")
#New df with behavior is nectaring
regal_remove_na<- regal_df |>
filter(sex=="M"| sex=="F") |>
filter(behavior==3) |>
filter(nectar_species_cleaned!= "NA") |>
filter(nectar_species_cleaned %in% c("ASTU", "ASSY", "CIDI", "CENTA", "CIPU4", "MOFI2"))
#plotting density values--eliminates small values (regal nectar use over years)
ggplot(regal_remove_na, aes(x=julian, y=factor(year), fill=nectar_species_cleaned))+
geom_density_ridges(scale= 1, alpha=.5, jittered_points = TRUE, rel_min_height= .1)+
facet_wrap(~factor(sex, levels = c("M", "F")))+
scale_y_discrete(limits=rev)
#plotting density values--eliminates small values (regal nectar use over years)
ggplot(regal_remove_na, aes(x=julian, y=factor(year), fill=nectar_species_cleaned))+
geom_density_ridges(scale= 1, alpha=.5, rel_min_height= .1)+
facet_wrap(~factor(sex, levels = c("M", "F")))+
scale_y_discrete(limits=rev)
#year as factor
regal_perm_results <- list(
year= adonis2(regal_perm_dist ~ year,
data = regal_return_matrix,
permutations = 10000),
month= adonis2(regal_perm_dist ~ month,
data = regal_return_matrix,
permutations = 10000),
year_month= adonis2(regal_perm_dist~year*month,
data= regal_return_matrix,
permutations = 10000),
field= adonis2(regal_perm_dist~field,
data= regal_return_matrix,
permutations = 10000),
month_field= adonis2(regal_perm_dist~ month*field,
data= regal_return_matrix,
permutations = 1000),
year_field= adonis2(regal_perm_dist~ field*year,
data= regal_return_matrix,
permutations = 10000))
view(regal_perm_results)
regal_perm_results
summary_table <- do.call(rbind, lapply(names(regal_perm_results), function(name) {
result <- regal_perm_results[[name]]
data.frame(
model = name,
R2 = result$R2[1],
F = result$F[1],
p = result$`Pr(>F)`[1],
row.names = NULL
)
}))
# View the summary table
print(_summary_table)
# View the summary table
print(summary_table)
#year as factor
regal_perm_results <- list(
year= adonis2(regal_perm_dist ~ year,
data = regal_return_matrix,
permutations = 999),
month= adonis2(regal_perm_dist ~ month,
data = regal_return_matrix,
permutations = 999),
year_month= adonis2(regal_perm_dist~year*month,
data= regal_return_matrix,
permutations = 999),
field= adonis2(regal_perm_dist~field,
data= regal_return_matrix,
permutations = 999),
month_field= adonis2(regal_perm_dist~ month*field,
data= regal_return_matrix,
permutations = 999),
year_field= adonis2(regal_perm_dist~ field*year,
data= regal_return_matrix,
permutations = 999))
summary_table <- do.call(rbind, lapply(names(regal_perm_results), function(name) {
result <- regal_perm_results[[name]]
data.frame(
model = name,
R2 = result$R2[1],
F = result$F[1],
p = result$`Pr(>F)`[1],
row.names = NULL
)
}))
# View the summary table
print(summary_table)
