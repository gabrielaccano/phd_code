ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_text(data=label_info, aes(label=drive_type),
hjust="hjustvar", vjust="vjustvar")
#11.3.1
#1 Use geom_text() with infinite positions to place text at the four corners of the plot.
annotations <- data.frame(
X = c(-Inf,-Inf,Inf,Inf),
Y =  c(-Inf, Inf,-Inf,Inf),
text = c("(x0,y0)","(x0,y1)",
"(x1,y0)","(x1,y1)"),
x_adjust = c(0,0,1,1),
y_adjust = c(0,1,0,1))
ggplot(mpg, aes(x=hwy, y=displ)) + geom_point()+
x=X,y=Y,hjust=x_adjust,vjust=y_adjust,label=text)
ggplot(mpg, aes(x=hwy, y=displ)) + geom_point()+
geom_text(data=annotations, aes(
x=X,y=Y,hjust=x_adjust,vjust=y_adjust,label=text))
#11.3.1
#1 Use geom_text() with infinite positions to place text at the four corners of the plot.
annotations <- data.frame(
X = c(-Inf,-Inf,Inf,Inf),
Y =  c(-Inf, Inf,-Inf,Inf),
x_adjust = c(0,0,1,1),
y_adjust = c(0,1,0,1))
ggplot(mpg, aes(x=hwy, y=displ)) + geom_point()+
geom_text(data=annotations, aes(
x=X,y=Y,hjust=x_adjust,vjust=y_adjust,label=text))
#4 What arguments to geom_label() control the appearance of the background box?
?geom_label()
#5 What are the four arguments to arrow()? How do they work?
?arrow
#angle- the angle of the arrow, essentially the width of the arrowhead
#length- the legnth of the arrow from tip to base
#ends- indicates which ends of the line to draw arrowheads
#type- indicates whether arrowhead should be an open or closed triangle
#Create a series of plots that demonstrate the most important options.
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
arrow(angle=30)
#angle- the angle of the arrow, essentially the width of the arrowhead
#length- the legnth of the arrow from tip to base
#ends- indicates which ends of the line to draw arrowheads
#type- indicates whether arrowhead should be an open or closed triangle
#Create a series of plots that demonstrate the most important options.
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
annotate(arrow(angle=30))
#angle- the angle of the arrow, essentially the width of the arrowhead
#length- the legnth of the arrow from tip to base
#ends- indicates which ends of the line to draw arrowheads
#type- indicates whether arrowhead should be an open or closed triangle
#Create a series of plots that demonstrate the most important options.
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
annotate(geom="segment", arrow(angle=30))
#angle- the angle of the arrow, essentially the width of the arrowhead
#length- the legnth of the arrow from tip to base
#ends- indicates which ends of the line to draw arrowheads
#type- indicates whether arrowhead should be an open or closed triangle
#Create a series of plots that demonstrate the most important options.
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
annotate(geom="segment",
x=3, y=35,
arrow(angle=30))
#angle- the angle of the arrow, essentially the width of the arrowhead
#length- the legnth of the arrow from tip to base
#ends- indicates which ends of the line to draw arrowheads
#type- indicates whether arrowhead should be an open or closed triangle
#Create a series of plots that demonstrate the most important options.
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
annotate(geom="segment",
x=3, y=35,
xend=5, yend=25,
arrow(angle=30))
#angle- the angle of the arrow, essentially the width of the arrowhead
#length- the legnth of the arrow from tip to base
#ends- indicates which ends of the line to draw arrowheads
#type- indicates whether arrowhead should be an open or closed triangle
#Create a series of plots that demonstrate the most important options.
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
annotate(geom="segment",
x=3, y=35,
xend=5, yend=25,
arrow= arrow(angle=30))
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
annotate(geom="segment",
x=3, y=35,
xend=5, yend=25,
arrow= arrow(length=6))
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
annotate(geom="segment",
x=3, y=35,
xend=5, yend=25,
arrow= arrow(length=unit(.25, "inches")))
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
annotate(geom="segment",
x=3, y=35,
xend=5, yend=25,
arrow= arrow(ends="both"))
ggplot(mpg, aes(x=displ, y=hwy))+
geom_point()+
annotate(geom="segment",
x=3, y=35,
xend=5, yend=25,
arrow= arrow(type="closed"))
ggplot(presidential, aes(x=start, y=id, color=party))+
geom_point()
#11.4.6
#3 Change the display of the presidential terms by:
#Combining the two variants that customize colors and x axis breaks.
?presidential
ggplot(presidential, aes(x=start, y=name, color=party))+
geom_point()
ggplot(presidential, aes(x=start, y=end, color=party))+
geom_point()
ggplot(presidential, aes(x=start, color=party))+
geom_bar()
ggplot(presidential, aes(x=name,y=start, color=party))+
geom_bar()
ggplot(presidential, aes(x=name, color=party))+
geom_bar()
ggplot(presidential, aes(x=name, fill=party))+
geom_bar()
ggplot(presidential, aes(x=name, fill=party))+
geom_bar()+
scale_color_manual(values=c(Republican= "pink", Democrat= "lightblue"))
ggplot(presidential, aes(x=name, fill=party))+
geom_bar()+
scale_fill_manual(values=c(Republican= "pink", Democrat= "lightblue"))
ggplot(presidential, aes(x=name, fill=party))+
geom_bar()+
scale_fill_manual(values=c(Republican= "pink", Democratic= "lightblue"))
presidential |> mutate(id = 33 + row_number())
ggplot(presidential, aes(x=year,y=id, fill=party))+
geom_point()+
scale_fill_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(presidential, aes(x=year,y=id, color=party))+
geom_point()+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
presidential |> mutate(id = 33 + row_number())
ggplot(presidential, aes(x=year,y=id, color=party))+
geom_point()+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(presidential, aes(x=year, y=id))+
geom_point(aes(color=party))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(presidential, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(presidential, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
presidential |> mutate(id = 33 + row_number()) |>
ggplot(presidential, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
presidential |> mutate(id = 33 + row_number()) |>
ggplot(presidential, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
presidential |>
mutate(id = 33 + row_number()) |>
ggplot(presidential, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
mutate_president<- presidential |>
mutate(id = 33 + row_number())
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_continuous(limits=c(1960, 2020))
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date()+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_discrete(breaks=12)+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_discrete(breaks=NULL)+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(breaks=12)+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
scale_x_date(breaks=waiver(12)+
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(breaks=waiver(12))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(mutate_president, aes(x=start, y=id))+
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(breaks=c(1960, 1968, 1976, 1984, 1992, 2000, 2008, 2016))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(breaks="4 years"))+
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(breaks="4 years")+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(breaks="8 years")+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
#Improving the display of the y axis.
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
labs(y="Presidential number")
#Improving the display of the y axis.
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
labs(y="Presidential number")+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
#Labelling each term with the name of the president.
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
geom_text(aes(label=name))+
scale_color_manual(values=c(Republican= "pink", Democratic= "lightblue"))
#Adding informative plot labels.
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
geom_text(aes(label=name))+
scale_color_manual(values=c(Republican= "red", Democratic= "blue"))
#Adding informative plot labels.
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
geom_text(aes(label=name), nudge_y=.2)+
scale_color_manual(values=c(Republican= "red", Democratic= "blue"))
#Labelling each term with the name of the president.
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
geom_text(aes(label=name), nudge_y=.2)+
scale_color_manual(values=c(Republican= "red", Democratic= "blue"))
#Adding informative plot labels.
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
geom_text(aes(label=name), nudge_y=.2)+
scale_color_manual(values=c(Republican= "red", Democratic= "blue"))+
labs(x="Term start", y= "Presdiential Number", color= "Party")
#Placing breaks every 4 years (this is trickier than it seems!).
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(breaks="8 years")+
scale_color_manual(values=c(Republican= "red", Democratic= "blue"))
#Placing breaks every 4 years (this is trickier than it seems!).
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(breaks="4 year")+
scale_color_manual(values=c(Republican= "red", Democratic= "blue"))
#Placing breaks every 4 years (this is trickier than it seems!).
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(date_breaks="4 years")+
scale_color_manual(values=c(Republican= "red", Democratic= "blue"))
#Placing breaks every 4 years (this is trickier than it seems!).
ggplot(mutate_president, aes(x=start, y=id))+
geom_point(aes(color=party))+
scale_x_date(date_breaks="4 years",date_labels = "'%y")+
scale_color_manual(values=c(Republican= "red", Democratic= "blue"))
library(tidyverse)
library(nycflights13)
?dplyr::near
#12.2.4
#1 How does dplyr::near() work? Type near to see the source code.
#Is sqrt(2)^2 near 2?
#near() has a built in tolerance, so it is a safer way to compare two vectors
near()
#12.2.4
#1 How does dplyr::near() work? Type near to see the source code.
#Is sqrt(2)^2 near 2?
#near() has a built in tolerance, so it is a safer way to compare two vectors
near(sqrt(2)^2, 2)
#12.3.4
#1 Find all flights where arr_delay is missing but dep_delay is not.
#Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.
flights |>
filter(arr_delay=="NA" & dep_delay!= "NA")
#12.3.4
#1 Find all flights where arr_delay is missing but dep_delay is not.
#Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.
flights |>
filter(arr_delay==NA & dep_delay != NA)
#12.3.4
#1 Find all flights where arr_delay is missing but dep_delay is not.
#Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.
flights |>
filter(arr_delay==NA & dep_delay ! NA)
#12.3.4
#1 Find all flights where arr_delay is missing but dep_delay is not.
#Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.
flights |>
filter(arr_delay==NA & dep_delay != NA)
#12.3.4
#1 Find all flights where arr_delay is missing but dep_delay is not.
#Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.
flights |>
filter(arr_delay=="NA" & dep_delay != "NA")
#12.3.4
#1 Find all flights where arr_delay is missing but dep_delay is not.
#Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.
flights |>
filter(arr_delay=="NA" | dep_delay != "NA")
#12.3.4
#1 Find all flights where arr_delay is missing but dep_delay is not.
#Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.
flights |>
filter(arr_delay=="NA" & dep_delay != "NA")
flights |>
filter(arr_time!="NA"& sched_arr_time!="NA" & arr_delay=="NA" )
#12.3.4
#1 Find all flights where arr_delay is missing but dep_delay is not.
#Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.
flights |>
filter(arr_delay=="NA", dep_delay != "NA")
#12.3.4
#1 Find all flights where arr_delay is missing but dep_delay is not.
#Find all flights where neither arr_time nor sched_arr_time are missing, but arr_delay is.
flights |>
filter(is.na(arr_delay), !is.na(dep_delay))
flights |>
filter(!is.na( arr_time & sched_arr_time), is.na(arr_delay))
setwd("C:/Users/GCano/Documents/GitHub/phd_code/")
original_matrix<- read_excel("Matrix_nt_2016-04-28 - Copy.xlsx", sheet = "Matrix")
#Look at flowers regals are using
library(tidyverse)
library(NatParksPalettes)
library (readxl)
setwd("C:/Users/GCano/Documents/GitHub/phd_code/")
original_matrix<- read_excel("Matrix_nt_2016-04-28 - Copy.xlsx", sheet = "Matrix")
updated_p_and_b<- read_excel("Matrix_nt_2016-04-28 - Copy.xlsx", sheet= "updated_p_and_b")
updated_matrix<-original_matrix
# Create a named vector for plant_name -> plant_code mapping
plant_code_map <- setNames(updated_p_and_b$plant_code, updated_p_and_b$plant_name)
# Replace nectar_species in original_matrix with corresponding plant_code
updated_matrix$nectar_species <- sapply(updated_matrix$nectar_species,
function(x) plant_code_map[x])
# Create a named vector for plant_name -> plant_code mapping
butterfly_code_map <- setNames(updated_p_and_b$butterfly_code, updated_p_and_b$butterfly_name)
# Replace nectar_species in original_matrix with corresponding plant_code
updated_matrix$butterfly_species <- sapply(updated_matrix$butterfly_species,
function(x) butterfly_code_map[x])
#Include missing values for 1998-2004
mutated_matrix<- updated_matrix |>
mutate(butterfly_species= ifelse(Year>= 1998 & Year<=2004, "ARID", butterfly_species))
#Include missing values for 1998-2004 and fix thistle
mutated_matrix<- updated_matrix |>
mutate(butterfly_species= ifelse(Year>= 1998 & Year<=2004, "ARID", butterfly_species)) |>
mutate(nectar_species = case_when(
Year >= 1998 & Year <= 2003 & Julian> 220 & nectar_species == "CIPU4" ~ "CIDI",
TRUE ~ nectar_species))
#most updated matrix
write.csv(mutated_matrix,"C:/Users/GCano/Documents/GitHub/phd_code/mutated_matrix.csv", row.names = FALSE)
#Assign weeks based on Julian Day
week_matrix<- mutated_matrix |>
mutate (Week=ceiling((Julian-122)/7))
#most updated matrix
write.csv(week_matrix,"C:/Users/GCano/Documents/GitHub/phd_code/updated_matrix_gcc_03_07_25.csv", row.names = FALSE)
#Only regals
regal_df<- week_matrix |>
filter(butterfly_species== "ARID")
#New df with behavior is nectaring
regal_remove_na<- regal_df |>
filter(!is.na(Sex)) |>
filter(Behavior==3) #|>
#Count of behaviors by year
regal_behavior_count <- fix_thistle %>%
group_by(Week, Julian, nectar_species, Year, Sex) %>%
summarise(count = n(), .groups = "drop") |>
filter(Sex != "MF", Sex!= "UNK")
library(ggridges)
ggplot(regal_behavior_count, aes(x=Week, y=factor(Year), fill=nectar_species))+
geom_density_ridges (scale= 1, alpha=.5)+
facet_wrap(~Sex)+
scale_y_discrete(limits=rev)+
theme_minimal()
#Count of behaviors by year
regal_behavior_count <- regal_remove_na %>%
group_by(Week, Julian, nectar_species, Year, Sex) %>%
summarise(count = n(), .groups = "drop") |>
filter(Sex != "MF", Sex!= "UNK")
ggplot(regal_behavior_count, aes(x=Week, y=factor(Year), fill=nectar_species))+
geom_density_ridges (scale= 1, alpha=.5)+
facet_wrap(~Sex)+
scale_y_discrete(limits=rev)+
theme_minimal()
ggplot(regal_behavior_count, aes(x=Julian, y=factor(Year), fill=nectar_species))+
geom_density_ridges (scale= 1, alpha=.7)+
facet_wrap(~factor(Sex, levels = c("M", "F")))+
scale_y_discrete(limits=rev)+
labs(title= "Nectar plant usage over time by male and female Eastern Regal Fritillaries",
x= "Julian Day", y="Year", fill= "Nectar Species")+
scale_fill_manual(labels= c("APOCY"= "Dogbane",
"ASSY"= "Common Milkweed",
"ASTU"= "Butterfly Milkweed",
"CENTA"= "Knapweed",
"CIDI"= "Field Thistle",
"CIPU4"= "Pasture Thistle",
"MOFI2"= "Bee Balm"),
values= okabe_ito_extended)+
theme_minimal()
okabe_ito_extended <- c(
"#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2",
"#D55E00", "#CC79A7", "#999999",  # Original Okabe-Ito (8 colors)
"#882255", "#44AA99", "#117733", "#88CCEE", "#DDCC77",
"#AA4499", "#332288", "#661100", "#BBBBBB", # Previously added (9 colors)
"#6699CC", "#AA7744"  # Two additional colors
)
ggplot(regal_behavior_count, aes(x=Julian, y=factor(Year), fill=nectar_species))+
geom_density_ridges (scale= 1, alpha=.7)+
facet_wrap(~factor(Sex, levels = c("M", "F")))+
scale_y_discrete(limits=rev)+
labs(title= "Nectar plant usage over time by male and female Eastern Regal Fritillaries",
x= "Julian Day", y="Year", fill= "Nectar Species")+
scale_fill_manual(labels= c("APOCY"= "Dogbane",
"ASSY"= "Common Milkweed",
"ASTU"= "Butterfly Milkweed",
"CENTA"= "Knapweed",
"CIDI"= "Field Thistle",
"CIPU4"= "Pasture Thistle",
"MOFI2"= "Bee Balm"),
values= okabe_ito_extended)+
theme_minimal()
#Include missing values for 1998-2004 and fix thistle
mutated_matrix<- updated_matrix |>
mutate(butterfly_species= ifelse(Year>= 1998 & Year<=2004, "ARID", butterfly_species)) |>
mutate(nectar_species = case_when(
Year >= 1998 & Year <= 2003 & Julian> 220 & nectar_species == "CIPU4" ~ "CIDI",
TRUE ~ nectar_species))|>
mutate(comment = case_when(
Year >= 1998 & Year <= 2003 & Julian > 220 & nectar_species == "CIDI" ~ "Changed from CIPU4 to CIDI on 03/07/25 by GCC with approval from FIG",
TRUE ~ comment  # Keep existing comments unchanged
))
#Include missing values for 1998-2004 and fix thistle
mutated_matrix<- updated_matrix |>
mutate(butterfly_species= ifelse(Year>= 1998 & Year<=2004, "ARID", butterfly_species)) |>
mutate(nectar_species = case_when(
Year >= 1998 & Year <= 2003 & Julian> 220 & nectar_species == "CIPU4" ~ "CIDI",
TRUE ~ nectar_species))|>
mutate(Comments = case_when(
Year >= 1998 & Year <= 2003 & Julian > 220 & nectar_species == "CIDI" ~ "Changed from CIPU4 to CIDI on 03/07/25 by GCC with approval from FIG",
TRUE ~ Comments  # Keep existing comments unchanged
))
#Include missing values for 1998-2004 and fix thistle
mutated_matrix<- updated_matrix |>
mutate(butterfly_species= ifelse(Year>= 1998 & Year<=2004, "ARID", butterfly_species)) |>
mutate(nectar_species = case_when(
Year >= 1998 & Year <= 2003 & Julian> 220 & nectar_species == "CIPU4" ~ "CIDI",
TRUE ~ nectar_species))|>
mutate(Comments = case_when(
Year >= 1998 & Year <= 2003 & Julian > 220 & nectar_species == "CIDI" ~
"Changed from CIPU4 to CIDI on 03/07/25 by GCC with approval from FIG",
TRUE ~ ifelse(is.na(Comments), "", Comments)  # Ensure comment is not NA
))
#Assign weeks based on Julian Day
week_matrix<- mutated_matrix |>
mutate (Week=ceiling((Julian-122)/7))
#most updated matrix
write.csv(week_matrix,"C:/Users/GCano/Documents/GitHub/phd_code/updated_matrix_gcc_03_07_25.csv", row.names = FALSE)
#pre-thistle replacement
write.csv(updated_matrix,"C:/Users/GCano/Documents/GitHub/phd_code/pre_thistle_matrix_gcc_03_07_25.csv", row.names = FALSE)
library(tidyverse)
library(NatParksPalettes)
library (readxl)
setwd("C:/Users/GCano/Documents/GitHub/phd_code/")
original_matrix<- read_excel("updated_matrix_gcc_03_07_25.xlsx", sheet = "mutated_matrix")
butterfly_codes<- read_excel("updated_matrix_gcc_03_07_25.xlsx", sheet= "butterfly_codes")
plant_codes<- read_excel("updated_matrix_gcc_03_07_25.xlsx", sheet= "plant_codes")
#fix dataframe naming -----------------
updated_matrix<-original_matrix
# Create a named vector for plant_name -> plant_code mapping
plant_code_map <- setNames(plant_codes$plant_code, plant_codes$plant_name)
# Replace nectar_species in original_matrix with corresponding plant_code
updated_matrix$nectar_species <- sapply(updated_matrix$nectar_species,
function(x) plant_code_map[x])
# Create a named vector for plant_name -> plant_code mapping
butterfly_code_map <- setNames(butterfly_codes$butterfly_code, butterfly_codes$butterfly_name)
# Replace nectar_species in original_matrix with corresponding plant_code
updated_matrix$butterfly_species <- sapply(updated_matrix$butterfly_species,
function(x) butterfly_code_map[x])
#pre-thistle replacement
write.csv(updated_matrix,"C:/Users/GCano/Documents/GitHub/phd_code/pre_thistle_matrix_gcc_03_11_25.csv", row.names = FALSE)
#Include missing values for 1998-2004 and fix thistle
mutated_matrix<- updated_matrix |>
mutate(butterfly_species= ifelse(Year>= 1998 & Year<=2004, "ARID", butterfly_species)) |>
mutate(nectar_species = case_when(
Year >= 1998 & Year <= 2003 & Julian> 220 & nectar_species == "CIPU4" ~ "CIDI",
TRUE ~ nectar_species))|>
mutate(Comments = case_when(
Year >= 1998 & Year <= 2003 & Julian > 220 & nectar_species == "CIDI" ~
"Changed from CIPU4 to CIDI on 03/07/25 by GCC with approval from FIG",
TRUE ~ ifelse(is.na(Comments), "", Comments)  # Ensure comment is not NA
))
#Assign weeks based on Julian Day
week_matrix<- mutated_matrix |>
mutate (Week=ceiling((Julian-122)/7))
#most updated matrix
write.csv(week_matrix,"C:/Users/GCano/Documents/GitHub/phd_code/updated_matrix_gcc_03_11_25.csv", row.names = FALSE)
